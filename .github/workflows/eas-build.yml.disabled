name: EAS Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'ios'
        type: choice
        options:
          - ios
          - android
          - all
      submit:
        description: 'Submit to store after build'
        required: true
        default: true
        type: boolean

jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📋 Build for iOS
        if: github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all' || github.event_name == 'push'
        id: ios-build
        run: |
          # Start the build and capture the build ID
          echo "Starting iOS build..."
          BUILD_OUTPUT=$(eas build --platform ios --profile production --non-interactive --json --no-wait 2>&1 || true)
          echo "Raw build output:"
          echo "$BUILD_OUTPUT"
          
          # Try to extract build ID from the output
          # EAS sometimes outputs extra text before the JSON
          BUILD_JSON=$(echo "$BUILD_OUTPUT" | grep -E '^\[|\{' | tail -1)
          
          if [ -n "$BUILD_JSON" ]; then
            echo "Extracted JSON: $BUILD_JSON"
            BUILD_ID=$(echo "$BUILD_JSON" | jq -r '.[0].id // .id // empty' 2>/dev/null || true)
          fi
          
          # Fallback: try to extract from URL pattern
          if [ -z "$BUILD_ID" ]; then
            echo "Trying to extract build ID from URL pattern..."
            BUILD_ID=$(echo "$BUILD_OUTPUT" | grep -oE '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}' | head -1 || true)
          fi
          
          if [ -z "$BUILD_ID" ]; then
            echo "WARNING: Could not extract build ID from output"
            echo "Build was started but we cannot track it"
          else
            echo "BUILD_ID=$BUILD_ID" >> $GITHUB_OUTPUT
            echo "Successfully captured build ID: $BUILD_ID"
          fi

      - name: 📋 Build for Android
        if: github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all'
        run: eas build --platform android --profile production --non-interactive --no-wait

      - name: 🚀 Submit to App Store
        if: (github.event.inputs.submit == 'true' || github.event_name == 'push') && (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'all' || github.event_name == 'push')
        run: |
          # Wait for specific build to complete
          BUILD_ID="${{ steps.ios-build.outputs.BUILD_ID }}"
          
          if [ -z "$BUILD_ID" ]; then
            echo "WARNING: No build ID found from previous step."
            echo "Will try to submit the latest build instead..."
            
            # Submit the latest build
            echo "Submitting latest iOS build to TestFlight..."
            eas submit --platform ios --latest --non-interactive
            exit 0
          fi
          
          echo "Waiting for iOS build $BUILD_ID to complete..."
          
          # Give EAS a moment to register the build
          sleep 10
          
          for i in {1..60}; do
            echo "Checking build status (attempt $i/60)..."
            
            # Get build list and save to file for debugging
            BUILD_LIST_OUTPUT=$(eas build:list --platform ios --limit 10 --json 2>&1 || true)
            echo "Build list raw output:"
            echo "$BUILD_LIST_OUTPUT" | head -20
            
            # Try to extract JSON from output
            BUILD_LIST_JSON=$(echo "$BUILD_LIST_OUTPUT" | grep -E '^\[' | head -1 || true)
            
            if [ -n "$BUILD_LIST_JSON" ]; then
              BUILD_STATUS=$(echo "$BUILD_LIST_JSON" | jq -r ".[] | select(.id==\"$BUILD_ID\") | .status" 2>/dev/null || true)
            else
              echo "Could not extract JSON from build list output"
              BUILD_STATUS=""
            fi
            
            # Alternative: try to get status from the output text
            if [ -z "$BUILD_STATUS" ]; then
              echo "Trying alternative status detection..."
              if echo "$BUILD_LIST_OUTPUT" | grep -q "$BUILD_ID.*finished"; then
                BUILD_STATUS="finished"
              elif echo "$BUILD_LIST_OUTPUT" | grep -q "$BUILD_ID.*error"; then
                BUILD_STATUS="errored"
              fi
            fi
            
            if [ -z "$BUILD_STATUS" ]; then
              echo "Build status not found, build might still be queued..."
            elif [ "$BUILD_STATUS" = "finished" ]; then
              echo "Build completed! Submitting to App Store..."
              eas submit --platform ios --id $BUILD_ID --non-interactive
              exit 0
            elif [ "$BUILD_STATUS" = "errored" ] || [ "$BUILD_STATUS" = "canceled" ]; then
              echo "Build failed with status: $BUILD_STATUS"
              exit 1
            else
              echo "Build status: $BUILD_STATUS. Waiting..."
            fi
            
            sleep 30
          done
          
          # If we exit the loop without submitting, it means timeout
          if [ "$BUILD_STATUS" != "finished" ]; then
            echo "Build did not complete within 30 minutes"
            exit 1
          fi

      - name: 🚀 Submit to Google Play
        if: github.event.inputs.submit == 'true' && (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'all') && github.event_name != 'push'
        run: |
          # Wait for build to complete (max 30 minutes)
          echo "Waiting for Android build to complete..."
          for i in {1..60}; do
            BUILD_STATUS=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].status')
            if [ "$BUILD_STATUS" = "FINISHED" ]; then
              echo "Build completed! Submitting to Google Play..."
              eas submit --platform android --latest --non-interactive
              break
            elif [ "$BUILD_STATUS" = "ERRORED" ]; then
              echo "Build failed!"
              exit 1
            fi
            echo "Build status: $BUILD_STATUS. Waiting..."
            sleep 30
          done
          
      - name: 📊 Summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build: ✅ Started" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.ios-build.outputs.BUILD_ID }}" ]; then
            echo "- Build ID: ${{ steps.ios-build.outputs.BUILD_ID }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Build ID: ❌ Not captured" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check builds at: https://expo.dev/accounts/jiveshbhatti/projects/peptidepal/builds" >> $GITHUB_STEP_SUMMARY